#!/usr/bin/env python

import roslib; roslib.load_manifest('cv_nodes')
import rospy
import cv_bridge
import cv
import cv2
import numpy
import time
import threading

import sensor_msgs

bridge = cv_bridge.CvBridge()
lock = threading.Lock()

def receive_source(msg):
    global pub_blurred
    global lock

    if not lock.acquire(False):
        return

    source = numpy.asarray(bridge.imgmsg_to_cv(msg)[:,:])
    smooth = rospy.get_param(rospy.get_name() + "/smooth", 1)
    sigma = int(smooth) * 2 + 1
    #blurred = cv2.GaussianBlur(source, (smooth, smooth), smooth, smooth)
    #blurred = cv2.GaussianBlur(source, (sigma, sigma), sigma)
    blurred = cv2.GaussianBlur(source, (0, 0), smooth)
    blurred_ros = bridge.cv_to_imgmsg(cv.fromarray(blurred))
    blurred_ros.header.seq = msg.header.seq
    blurred_ros.header.stamp = msg.header.stamp
    blurred_ros.encoding = msg.encoding
    pub_blurred.publish(blurred_ros)
    lock.release()

if __name__ == "__main__":
    rospy.init_node("GaussianBlur", anonymous=True)
    nodename = rospy.get_name()
    if not rospy.has_param(nodename + "/smooth"):
        rospy.set_param(rospy.get_name() + "/smooth", 1)
    if not rospy.has_param(nodename + "/source"):
        rospy.set_param(rospy.get_name() + "/source", "source")
    rospy.set_param(rospy.get_name() + "/smooth__meta/type", "float")
    rospy.set_param(rospy.get_name() + "/smooth__meta/min_value", 1.0)
    rospy.set_param(rospy.get_name() + "/smooth__meta/max_value", 20.0)
    rospy.set_param(rospy.get_name() + "/smooth__meta/increment", 0.01)
    rospy.set_param(rospy.get_name() + "/source__meta/type", "string")
    rospy.set_param(rospy.get_name() + "/source__meta/defines", "topic")
    rospy.set_param(rospy.get_name() + "/source__meta/topic_type", "sensor_msgs/Image")
    pub_blurred = rospy.Publisher(rospy.get_name() + "/blurred", sensor_msgs.msg.Image)

    sub_source = None
    source = ""
    while not rospy.is_shutdown():
        with lock:
            new_source = rospy.get_param(rospy.get_name() + "/source")
            if new_source != source:
                print "Setting source: %s" % new_source
                print "Got lock"
                source = new_source
                if sub_source:
                    print "unregistering"
                    sub_source.unregister()
                print "subscribing to %s" % source
                sub_source = rospy.Subscriber(source, sensor_msgs.msg.Image, receive_source)
                print "all done"
        time.sleep(1)
        
    rospy.delete_param(rospy.get_name())
    
